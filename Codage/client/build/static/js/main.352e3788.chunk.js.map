{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","messageMetropole","setMessageMetropole","messageExterieur","setMessageExterieur","metropoleListe","setMetropoleListe","exterieurListe","setExterieurListe","className","id","type","name","placeholder","onKeyPress","e","key","target","value","ville","axios","post","headers","then","res","console","log","data","metroLength","length","extLength","catch","err","error","dangerouslySetInnerHTML","__html","map","index","nomCommune","codePostal","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,+IC+F5BC,MA1Ff,WAAgB,IAAD,EAEmCC,mBAAS,gEAF5C,mBAENC,EAFM,KAEYC,EAFZ,OAGmCF,mBAAS,gEAH5C,mBAGNG,EAHM,KAGYC,EAHZ,OAI+BJ,mBAAS,IAJxC,mBAINK,EAJM,KAIUC,EAJV,OAK+BN,mBAAS,IALxC,mBAKNO,EALM,KAKUC,EALV,KA+Bb,OACE,yBAAKC,UAAU,2BACb,yBAAKA,UAAU,SAASC,GAAG,aACzB,+CACA,2BAAOD,UAAU,eAAeE,KAAK,SAASC,KAAK,QAAQC,YAAY,+BAA+BC,WAAY,SAAAC,GAAC,MAAc,UAAVA,EAAEC,KAAsC,KAAnBD,EAAEE,OAAOC,OA5BtIC,EA4BiKJ,EAAEE,OAAOC,WArB7LE,IAAMC,KAAK,yBAA0B,CAAEF,MAAOA,GAN/B,CACbG,QAAS,CACP,eAAgB,sBAKjBC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,MAEhBrB,EAAkBkB,EAAIG,KAAK,IAC3B,IAAIC,EAAcJ,EAAIG,KAAK,GAAGE,OACP3B,EAAH,IAAhB0B,EAAuC,mFAClB,qCAAD,OAAsCA,EAAtC,YAAqE,IAAhBA,EAAoB,QAAU,SAAnF,wCAExBpB,EAAkBgB,EAAIG,KAAK,IAC3B,IAAIG,EAAYN,EAAIG,KAAK,GAAGE,OACPzB,EAAH,IAAd0B,EAAqC,mFAChB,qCAAD,OAAsCA,EAAtC,YAAiE,IAAdA,EAAkB,QAAU,SAA/E,2CAEzBC,OAAM,SAAAC,GAAG,OAAIP,QAAQQ,MAAMD,OAOwK,KA5BpL,IAACb,MA+BjB,yBAAKV,UAAU,UAEb,yBAAKA,UAAU,cACb,yBAAKC,GAAG,8BACN,wBAAID,UAAU,SAAd,0BACCR,EAAmB,yBAAKiC,wBAAyB,CAAEC,OAAQlC,KAA6B,KAAK,6BAC9F,yBAAKQ,UAAU,WAEZJ,GAAkBA,EAAewB,OAAS,EACzCxB,EAAe+B,KAAI,SAACjB,EAAOkB,GACzB,OAAO,kBAAC,WAAD,CAAUrB,IAAK,aAAeqB,GACnC,yBAAK5B,UAAU,2BACb,yBAAKA,UAAU,OAAOU,EAAMmB,YAAiB,yBAAK7B,UAAU,eAAeU,EAAMoB,iBAKvF,QAOR,yBAAK9B,UAAU,cACb,yBAAKC,GAAG,8BACN,wBAAID,UAAU,SAAd,sBACCN,EAAmB,yBAAK+B,wBAAyB,CAAEC,OAAQhC,KAA6B,KAAK,6BAC9F,yBAAKM,UAAU,WAEZF,GAAkBA,EAAesB,OAAS,EACzCtB,EAAe6B,KAAI,SAACjB,EAAOkB,GACzB,OAAO,kBAAC,WAAD,CAAUrB,IAAK,aAAeqB,GACnC,yBAAK5B,UAAU,2BACb,yBAAKA,UAAU,OAAOU,EAAMmB,YAAiB,yBAAK7B,UAAU,eAAeU,EAAMoB,iBAKvF,WCtEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdvB,OAAM,SAAAE,GACLR,QAAQQ,MAAMA,EAAMsB,c","file":"static/js/main.352e3788.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, Fragment } from 'react';\nimport logo from './logo.svg';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n\n  const [messageMetropole, setMessageMetropole] = useState(\"<div class='bloc msg msg-info'>Effectuez une recherche</div>\")\n  const [messageExterieur, setMessageExterieur] = useState(\"<div class='bloc msg msg-info'>Effectuez une recherche</div>\")\n  const [metropoleListe, setMetropoleListe] = useState(\"\")\n  const [exterieurListe, setExterieurListe] = useState(\"\")\n\n  const sendRequest = (ville) => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    axios.post(\"http://localhost:4141/\", { ville: ville }, config)\n      .then(res => {\n        console.log(res.data);\n\n        setMetropoleListe(res.data[0])\n        let metroLength = res.data[0].length;\n        if (metroLength === 0) setMessageMetropole(\"<div class='bloc msg msg-danger'>Aucune ville correspondant au texte saisi</div>\")\n        else setMessageMetropole(`<div class='bloc msg msg-success'>${metroLength} ${metroLength === 1 ? \"ville\" : \"villes\"} correspondant au texte saisi</div>`)\n\n        setExterieurListe(res.data[1])\n        let extLength = res.data[1].length;\n        if (extLength === 0) setMessageExterieur(\"<div class='bloc msg msg-danger'>Aucune ville correspondant au texte saisi</div>\")\n        else setMessageExterieur(`<div class='bloc msg msg-success'>${extLength} ${extLength === 1 ? \"ville\" : \"villes\"} correspondant au texte saisi</div>`)\n      })\n      .catch(err => console.error(err))\n  }\n\n  return (\n    <div className=\"App container-fluid p-4\">\n      <div className=\"d-flex\" id=\"searchbar\">\n        <h1>Je recherche...</h1>\n        <input className=\"form-control\" type=\"search\" name=\"ville\" placeholder=\"...une ville, un code postal\" onKeyPress={e => e.key === \"Enter\" && e.target.value !== \"\" ? sendRequest(e.target.value) : null} />\n      </div>\n\n      <div className=\"d-flex\">\n\n        <div className=\"col-6 pl-0\" >\n          <div id=\"metropole-villes-container\">\n            <h2 className=\"titre\">Villes de m√©tropole</h2>\n            {messageMetropole ? <div dangerouslySetInnerHTML={{ __html: messageMetropole }}></div> : null}<br />\n            <div className='results'>\n\n              {metropoleListe && metropoleListe.length > 0 ?\n                metropoleListe.map((ville, index) => {\n                  return <Fragment key={\"metropole-\" + index}>\n                    <div className=\"col-6 bloc ville d-flex\">\n                      <div className=\"nom\">{ville.nomCommune}</div><div className=\"code-postal\">{ville.codePostal}</div>\n                    </div>\n                  </Fragment>\n                })\n                :\n                null\n              }\n\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-6 pr-0\" >\n          <div id=\"exterieur-villes-container\">\n            <h2 className=\"titre\">Villes d'outre-mer</h2>\n            {messageExterieur ? <div dangerouslySetInnerHTML={{ __html: messageExterieur }}></div> : null}<br />\n            <div className='results'>\n\n              {exterieurListe && exterieurListe.length > 0 ?\n                exterieurListe.map((ville, index) => {\n                  return <Fragment key={\"exterieur-\" + index}>\n                    <div className=\"col-6 bloc ville d-flex\">\n                      <div className=\"nom\">{ville.nomCommune}</div><div className=\"code-postal\">{ville.codePostal}</div>\n                    </div>\n                  </Fragment>\n                })\n                :\n                null\n              }\n\n            </div>\n          </div>\n        </div>\n\n      </div>\n\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}